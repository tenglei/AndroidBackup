package com.qualcomm.bluetoothclient;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Set;
import java.util.UUID;

import org.apache.commons.codec.binary.Base64;

import RSA.RSA;
import RSA.encry;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;

import org.apache.commons.codec.binary.*;

public class ClientActivity extends Activity implements OnItemClickListener {


	private Context mContext;
	private BluetoothAdapter mBluetoothAdapter; 
	private BluetoothDevice device;             
	private ListView mListView;
	private ArrayList<ChatMessage> list;
	private ClientAdapter clientAdapter;        
	private Button disconnect = null, sendButton = null;
	
	
	private BluetoothSocket socket;     
	private ClientThread mClientThread; 
	private ReadThread mReadThread;     
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		init();
	}

	
	

	private void init() {
		// TODO Auto-generated method stub
		mContext = this;
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		
		list = new ArrayList<ChatMessage>();
		clientAdapter = new ClientAdapter(mContext, list);  
		
		mListView = (ListView) findViewById(R.id.list);
		
		mListView.setFastScrollEnabled(true); 
		
		mListView.setAdapter(clientAdapter);
		
		mListView.setOnItemClickListener(this);
		
		
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		registerReceiver(mReceiver, filter);
		
		
		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
		
		if (pairedDevices.size() > 0) {  
			for (BluetoothDevice device : pairedDevices) {
				
				
				list.add(new ChatMessage(device.getName() + "\n" + device.getAddress(), false));
				
				clientAdapter.notifyDataSetChanged();  
				
				mListView.setSelection(list.size() - 1); 
			}
		} else {  
			list.add(new ChatMessage("没有已经配对过的PC", false));
			clientAdapter.notifyDataSetChanged();
			mListView.setSelection(list.size() - 1);
		}
		
		
		sendButton = (Button) findViewById(R.id.btn_send);
		sendButton.setEnabled(false);

		sendButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				String msg;
		        SharedPreferences sharedPreferences = getSharedPreferences("myKeys", Context.MODE_PRIVATE);
		        msg=sharedPreferences.getString("msg", "empty");
				if (!msg.equals("empty")) {
					
					
					sendMessageHandler(msg);
				} else {
					Toast.makeText(mContext, "未接收密钥，密钥为空", Toast.LENGTH_SHORT).show();
					sendMessageHandler(msg);
				}
			}
		});
		
		disconnect = (Button) findViewById(R.id.disconnect);
		disconnect.setEnabled(false);
		
		disconnect.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				closeClient();
			
				BluetoothMsg.isOpen = false;
				
				BluetoothMsg.serviceOrCilent = BluetoothMsg.ServerOrCilent.NONE;
				Toast.makeText(mContext, "连接已断开", Toast.LENGTH_SHORT).show();
				disconnect.setEnabled(false);
				sendButton.setEnabled(false);
			}
		});
	}
	
	@Override
	protected void onStart() {
		
		super.onStart();
		if (mBluetoothAdapter != null) {  //存在
			if (!mBluetoothAdapter.isEnabled()) {   
				
				
        		Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
        		
        		startActivityForResult(enableIntent, RESULT_FIRST_USER);
        		
        				
        		Intent displayIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
        		
        		displayIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 0);
        		
        		startActivity(displayIntent);
        		
        		
        		mBluetoothAdapter.enable();
			}
		}
	}
	
	
	@Override
	protected void onResume() {
		
		super.onResume();
		
		scanDevice();  
	}
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
          
        	String action = intent.getAction(); 


            if (BluetoothDevice.ACTION_FOUND.equals(action)) 
            {
            	
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                
               
                if (device.getBondState() != BluetoothDevice.BOND_BONDED) 
                {
                	list.add(new ChatMessage(device.getName() + "\n" + device.getAddress(), false));
                	clientAdapter.notifyDataSetChanged();
            		mListView.setSelection(list.size() - 1);
                }
            } 
            else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) 
            {
                setProgressBarIndeterminateVisibility(false);  
                if (mListView.getCount() == 0) 
                {
                	list.add(new ChatMessage("没有发现PC", true));
                	clientAdapter.notifyDataSetChanged();
            		mListView.setSelection(list.size() - 1);
                }
            }
        }
    }; 
    private Handler LinkDetectedHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
        	
        	if(msg.what==1)
        	{
        		list.add(new ChatMessage((String)msg.obj, true));
        	}
        	else
        	{
        		list.add(new ChatMessage((String)msg.obj, false));
        	}
			clientAdapter.notifyDataSetChanged();
			mListView.setSelection(list.size() - 1);
			
        }
        
    };
   
    private Handler refreshUI = new Handler() {
    	public void handleMessage(Message msg) {
    		if (msg.what == 0) {
    			disconnect.setEnabled(true);
				sendButton.setEnabled(true);
				
			}
    	}
    };
    
  
    private class ClientThread extends Thread {
    	@Override
    	public void run() {
    		
    		if (device != null) {
				try {
					
					socket = device.createRfcommSocketToServiceRecord(UUID.fromString("00001101-0000-1000-8000-00805F9B34FB"));
					
					Message msg = new Message();
					msg.obj = "请稍候，正在连接服务器: "+ BluetoothMsg.BlueToothAddress;
					msg.what = 0;
					LinkDetectedHandler.sendMessage(msg); 
					
					socket.connect();
					
					Message msg2 = new Message();
					msg2.obj = "已经连接上服务端！可以发送密钥";
					msg2.what = 0;
					LinkDetectedHandler.sendMessage(msg2); 
					
					
					Message uiMessage = new Message();
					uiMessage.what = 0;
					refreshUI.sendMessage(uiMessage);
					
				
					mReadThread = new ReadThread();
					mReadThread.start();
				} catch (IOException e) {
					
					Message msg = new Message();
					msg.obj = "连接服务端异常！断开连接重新试一试。";
					msg.what = 0;
					LinkDetectedHandler.sendMessage(msg);
				}
			}
    	}
    }
    
    
    private class ReadThread extends Thread {
    	@Override
    	public void run() {
    		
    
    		byte[] buffer = new byte[1024];
    		int bytes;
    		InputStream is = null;
    		try {
				is = socket.getInputStream(); 
			} catch (IOException e) {
				
				e.printStackTrace();
			}
    		System.out.println("get");
    		while(true) {
    			try {
					if ((bytes = is.read(buffer)) > 0) {
						byte[] data = new byte[bytes];
						for (int i = 0; i < data.length; i++) {
							data[i] = buffer[i];
						}
						String s = new String(data);
						
						SharedPreferences sharedPreferences = getSharedPreferences("myKeys", Context.MODE_PRIVATE);					
						try {
							byte[] keyMsg = {0,1,0,1,1,0,1,0};
							byte[] sendKey;
							sendKey=encry.encryptByPublicKey(keyMsg,data);
							String keyMsgString = new String(sendKey);
							Editor editor = sharedPreferences.edit();
							editor.putString("key", s);
							editor.putString("msg",keyMsgString);
							editor.commit();
							
							
						} catch (Exception e) {
							
							e.printStackTrace();
						}
						
						
						
						
						
						Message msg = new Message();
						msg.obj = s;
						msg.what = 2;  
						LinkDetectedHandler.sendMessage(msg);
					}
				} catch (IOException e) {
					
					try {
						is.close();
					} catch (IOException e1) {
						
						e1.printStackTrace();
					}
					break;
				}
    		}
    	}
    }
	
    private void sendMessageHandler(String msg) {
    	if (socket == null) {
			Toast.makeText(mContext, "没有可用的连接", Toast.LENGTH_SHORT).show();
			return;
		}
    	System.out.println("post");
    
    	try {
			OutputStream os = socket.getOutputStream();
			os.write(msg.getBytes());
		} catch (IOException e) {
			
			e.printStackTrace();
		}
    	list.add(new ChatMessage(msg, true));  
    	clientAdapter.notifyDataSetChanged();
    	mListView.setSelection(list.size() - 1);
    }
    private void closeClient() {
    	new Thread() {
    		public void run() {
    			if (mClientThread != null) {
    				mClientThread.interrupt();
    				mClientThread = null;
				}
    			if (mReadThread != null) {
					mReadThread.interrupt();
					mReadThread = null;
				}
    			try {
					if (socket != null) {
						socket.close();
						socket = null;
					}
				} catch (IOException e) {
					
				}
    		}
    	}.start();
    }
    
    
   
    private void scanDevice() {
		// TODO Auto-generated method stub
    	if (mBluetoothAdapter.isDiscovering()) {  
			mBluetoothAdapter.cancelDiscovery();  
		} else {
			list.clear();
			clientAdapter.notifyDataSetChanged();
			Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
			if (pairedDevices.size() > 0) {
		            for (BluetoothDevice device : pairedDevices) {
		            	list.add(new ChatMessage(device.getName() + "\n" + device.getAddress(), false));
		            	clientAdapter.notifyDataSetChanged();
		        		mListView.setSelection(list.size() - 1);
		            }
		    } else {
		        	list.add(new ChatMessage("没有匹配的设备", false));
		        	clientAdapter.notifyDataSetChanged();
		    		mListView.setSelection(list.size() - 1);
     	     }				
	        
			mBluetoothAdapter.startDiscovery();
		}
	}
	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		// TODO Auto-generated method stub
		ChatMessage item = list.get(arg2);  
		String info = item.getMessage();    
		
		String address = info.substring(info.length() - 17);
		
		
		BluetoothMsg.BlueToothAddress = address;
		mBluetoothAdapter.cancelDiscovery();
		
		
		device = mBluetoothAdapter.getRemoteDevice(BluetoothMsg.BlueToothAddress);
		mClientThread = new ClientThread(); 
		mClientThread.start();
		BluetoothMsg.isOpen = true;
		
	}

	
	@Override
	protected void onDestroy() {
		
		super.onDestroy();
		if (mBluetoothAdapter != null) {
			mBluetoothAdapter.cancelDiscovery();
			
			mBluetoothAdapter.disable();
		}
		unregisterReceiver(mReceiver);
		closeClient();
	}
}
